name: Le pipeline

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: self-hosted

    strategy:
      fail-fast: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: '18.x'

      - name: Install dependencies
        working-directory: angular-docker
        run: |
            npm ci
            sudo apt-get update
            sudo apt-get install -y wget gnupg
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
            sudo apt-get update
            sudo apt-get install -y google-chrome-stable

      - name: Unit tests
        working-directory: angular-docker
        env:
          CHROME_BIN: /usr/bin/google-chrome
        run: |
          npm test -- --watch=false --browsers=ChromeHeadless

      - name: Scan with SonarQube
        run: |
          sonar-scanner \
          -Dsonar.projectKey="Angular" \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        with:
          scanMetadataReportFile: ./.scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build:
    runs-on: ubuntu-latest
    needs: tests

    strategy:
      fail-fast: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker builder
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD_WRITE }}

      - name: Build and push Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_TAG }}

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Deploy to Production
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
          docker stop angular-prod || true
          docker rm angular-prod || true
          docker run -d -p 9003:9003 --network devops --name angular-prod --pull always ${{ secrets.DOCKER_TAG }}
          EOF
